// <auto-generated />
using System;
using DataLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataLayer.Migrations
{
    [DbContext(typeof(EshopContext))]
    partial class EshopContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataLayer.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categorys");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "Grafikkort"
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Bærbar"
                        },
                        new
                        {
                            CategoryId = 3,
                            Name = "Mobil"
                        },
                        new
                        {
                            CategoryId = 4,
                            Name = "TV"
                        },
                        new
                        {
                            CategoryId = 5,
                            Name = "Tastatur"
                        },
                        new
                        {
                            CategoryId = 6,
                            Name = "Mus"
                        });
                });

            modelBuilder.Entity("DataLayer.Entities.Customer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("DataLayer.Entities.Manufacturer", b =>
                {
                    b.Property<int>("ManufacturerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ManufacturerId");

                    b.ToTable("Manufacturers");

                    b.HasData(
                        new
                        {
                            ManufacturerId = 1,
                            Name = "ASUS"
                        },
                        new
                        {
                            ManufacturerId = 2,
                            Name = "Acer"
                        },
                        new
                        {
                            ManufacturerId = 3,
                            Name = "Apple"
                        },
                        new
                        {
                            ManufacturerId = 4,
                            Name = "Lenovo"
                        },
                        new
                        {
                            ManufacturerId = 5,
                            Name = "DELL"
                        },
                        new
                        {
                            ManufacturerId = 6,
                            Name = "HP"
                        },
                        new
                        {
                            ManufacturerId = 7,
                            Name = "MSI"
                        },
                        new
                        {
                            ManufacturerId = 8,
                            Name = "Samsung"
                        },
                        new
                        {
                            ManufacturerId = 9,
                            Name = "LG"
                        },
                        new
                        {
                            ManufacturerId = 10,
                            Name = "Razer"
                        },
                        new
                        {
                            ManufacturerId = 11,
                            Name = "Steelseries"
                        });
                });

            modelBuilder.Entity("DataLayer.Entities.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateOfPurchase")
                        .HasColumnType("datetime2");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("DataLayer.Entities.OrderProduct", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Pieces")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProduct");
                });

            modelBuilder.Entity("DataLayer.Entities.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("ManufacturerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(8, 2)");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 1,
                            ManufacturerId = 1,
                            Name = "ASUS GeForce RTX 2080 SUPER ROG Strix Advanced",
                            Price = 7319m
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 1,
                            ManufacturerId = 7,
                            Name = "MSI GeForce RTX 2080 SUPER SEA HAWK EK X",
                            Price = 6999m
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 1,
                            ManufacturerId = 1,
                            Name = "ASUS Radeon RX 5500 XT ROG Strix OC 8GB",
                            Price = 1999m
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 1,
                            ManufacturerId = 1,
                            Name = "ASUS GeForce GTX 1660 SUPER ROG Strix OC",
                            Price = 2229m
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 2,
                            ManufacturerId = 7,
                            Name = "MSI GE75 Raider 17,3 FHD 240 Hz",
                            Price = 19990m
                        },
                        new
                        {
                            ProductId = 6,
                            CategoryId = 2,
                            ManufacturerId = 2,
                            Name = "Acer Nitro 5 15,6 FHD 120 Hz",
                            Price = 5290m
                        },
                        new
                        {
                            ProductId = 7,
                            CategoryId = 2,
                            ManufacturerId = 7,
                            Name = "MSI Prestige 15 15,6 Full HD",
                            Price = 11995m
                        },
                        new
                        {
                            ProductId = 8,
                            CategoryId = 2,
                            ManufacturerId = 1,
                            Name = "ASUS ZenBook Pro Duo 15,6 UHD / 4K OLED Touch",
                            Price = 21490m
                        },
                        new
                        {
                            ProductId = 9,
                            CategoryId = 2,
                            ManufacturerId = 2,
                            Name = "Acer Chromebook R13 CB5-312T 13.3 FHD",
                            Price = 2495m
                        },
                        new
                        {
                            ProductId = 10,
                            CategoryId = 2,
                            ManufacturerId = 3,
                            Name = "Apple MacBook Pro laptop 16 1TB MVV med touch bar",
                            Price = 21999m
                        },
                        new
                        {
                            ProductId = 11,
                            CategoryId = 2,
                            ManufacturerId = 4,
                            Name = "Lenovo ThinkPad P53 15,6 Workstation Pro Full HD",
                            Price = 27990m
                        },
                        new
                        {
                            ProductId = 12,
                            CategoryId = 2,
                            ManufacturerId = 5,
                            Name = "Dell Vostro 3590 15,6 Full HD",
                            Price = 5290m
                        },
                        new
                        {
                            ProductId = 13,
                            CategoryId = 2,
                            ManufacturerId = 5,
                            Name = "Dell XPS 13 7390 13,3 UHD / 4K Touch",
                            Price = 13690m
                        },
                        new
                        {
                            ProductId = 14,
                            CategoryId = 2,
                            ManufacturerId = 6,
                            Name = "HP Spectre x360 15-df1012no 15,6 UHD OLED touch",
                            Price = 17495m
                        },
                        new
                        {
                            ProductId = 15,
                            CategoryId = 2,
                            ManufacturerId = 10,
                            Name = "Razer Blade Pro 17,3 UHD / 4K touch 120 Hz",
                            Price = 33495m
                        },
                        new
                        {
                            ProductId = 16,
                            CategoryId = 3,
                            ManufacturerId = 8,
                            Name = "Samsung Galaxy S20 Ultra 5G 128GB Grå",
                            Price = 10499m
                        },
                        new
                        {
                            ProductId = 17,
                            CategoryId = 3,
                            ManufacturerId = 8,
                            Name = "Samsung Galaxy A51 128GB Sort",
                            Price = 2789m
                        },
                        new
                        {
                            ProductId = 18,
                            CategoryId = 3,
                            ManufacturerId = 3,
                            Name = "iPhone 11 Pro Max 64 GB Grå",
                            Price = 9649m
                        },
                        new
                        {
                            ProductId = 19,
                            CategoryId = 3,
                            ManufacturerId = 3,
                            Name = "Apple iPhone SE 64GB Sort",
                            Price = 3699m
                        },
                        new
                        {
                            ProductId = 20,
                            CategoryId = 4,
                            ManufacturerId = 8,
                            Name = "Samsung 75 QLED Smart TV QE75Q60R",
                            Price = 16990m
                        },
                        new
                        {
                            ProductId = 21,
                            CategoryId = 4,
                            ManufacturerId = 8,
                            Name = "Samsung 75 QLED Smart TV QE75Q90R",
                            Price = 39990m
                        },
                        new
                        {
                            ProductId = 22,
                            CategoryId = 4,
                            ManufacturerId = 9,
                            Name = "LG 55 UHD OLED Smart TV OLED55C9",
                            Price = 9990m
                        },
                        new
                        {
                            ProductId = 23,
                            CategoryId = 4,
                            ManufacturerId = 9,
                            Name = "LG 48 OLED TV OLED48CX6",
                            Price = 11999m
                        },
                        new
                        {
                            ProductId = 24,
                            CategoryId = 5,
                            ManufacturerId = 10,
                            Name = "Razer BlackWidow Elite Gaming Tastatur",
                            Price = 1399m
                        },
                        new
                        {
                            ProductId = 25,
                            CategoryId = 5,
                            ManufacturerId = 1,
                            Name = "ASUS ROG Strix Scope Gaming Tastatur",
                            Price = 1099m
                        },
                        new
                        {
                            ProductId = 26,
                            CategoryId = 5,
                            ManufacturerId = 11,
                            Name = "SteelSeries Apex Pro Gaming Tastatur",
                            Price = 1599m
                        },
                        new
                        {
                            ProductId = 27,
                            CategoryId = 6,
                            ManufacturerId = 10,
                            Name = "Razer Basilisk Ultimate Trådløs Gaming Mus",
                            Price = 1349m
                        },
                        new
                        {
                            ProductId = 28,
                            CategoryId = 6,
                            ManufacturerId = 1,
                            Name = "ASUS ROG Chakram Trådløs Gaming Mus",
                            Price = 1079m
                        },
                        new
                        {
                            ProductId = 29,
                            CategoryId = 6,
                            ManufacturerId = 11,
                            Name = "Steelseries Rival 710 Gaming Mus",
                            Price = 799m
                        });
                });

            modelBuilder.Entity("DataLayer.Entities.ProductImage", b =>
                {
                    b.Property<int>("ProductImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("ProductImageId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImage");

                    b.HasData(
                        new
                        {
                            ProductImageId = 1,
                            Image = "https://www.elgiganten.dk/image/dv_web_D180001002410624/153758/lg-48-cx-4k-oled-tv-oled48cx.jpg?$fullsize$",
                            ProductId = 23
                        },
                        new
                        {
                            ProductImageId = 2,
                            Image = "https://www.elgiganten.dk/image/dv_web_D180001002410670/153758/lg-48-cx-4k-oled-tv-oled48cx.jpg?$fullsize$",
                            ProductId = 23
                        },
                        new
                        {
                            ProductImageId = 3,
                            Image = "https://www.elgiganten.dk/image/dv_web_D180001002410669/153758/lg-48-cx-4k-oled-tv-oled48cx.jpg?$prod_all4one$",
                            ProductId = 23
                        },
                        new
                        {
                            ProductImageId = 4,
                            Image = "https://www.komplett.dk/img/p/1200/1135677.jpg",
                            ProductId = 1
                        },
                        new
                        {
                            ProductImageId = 5,
                            Image = "https://www.komplett.dk/img/p/1200/1139034.jpg",
                            ProductId = 2
                        },
                        new
                        {
                            ProductImageId = 6,
                            Image = "https://www.komplett.dk/img/p/1200/1149212.jpg",
                            ProductId = 3
                        },
                        new
                        {
                            ProductImageId = 7,
                            Image = "https://www.komplett.dk/img/p/1200/1148757.jpg",
                            ProductId = 4
                        },
                        new
                        {
                            ProductImageId = 8,
                            Image = "https://www.komplett.dk/img/p/1200/1153467.jpg",
                            ProductId = 5
                        },
                        new
                        {
                            ProductImageId = 9,
                            Image = "https://www.komplett.dk/img/p/1200/1156443.jpg",
                            ProductId = 6
                        },
                        new
                        {
                            ProductImageId = 10,
                            Image = "https://www.komplett.dk/img/p/1200/1135667.jpg",
                            ProductId = 7
                        },
                        new
                        {
                            ProductImageId = 11,
                            Image = "https://www.komplett.dk/img/p/1200/1132405.jpg",
                            ProductId = 8
                        },
                        new
                        {
                            ProductImageId = 12,
                            Image = "https://www.komplett.dk/img/p/1200/898464.jpg",
                            ProductId = 9
                        },
                        new
                        {
                            ProductImageId = 13,
                            Image = "https://sg-next.imgix.net/medias/sys_master/root/hbd/h3a/13735092912158/MacBook-Pro-16-in-Pure-Front-Space-Gray-SCREEN-result.jpg?w=350&h=350&auto=format&fm=jpg",
                            ProductId = 10
                        },
                        new
                        {
                            ProductImageId = 14,
                            Image = "https://www.komplett.dk/img/p/1000/1137677.jpg",
                            ProductId = 11
                        },
                        new
                        {
                            ProductImageId = 15,
                            Image = "https://www.komplett.dk/img/p/1200/1150472.jpg",
                            ProductId = 12
                        },
                        new
                        {
                            ProductImageId = 16,
                            Image = "https://www.komplett.dk/img/p/1200/1146637.jpg",
                            ProductId = 13
                        },
                        new
                        {
                            ProductImageId = 17,
                            Image = "https://www.komplett.dk/img/p/1200/1132707.jpg",
                            ProductId = 14
                        },
                        new
                        {
                            ProductImageId = 18,
                            Image = "https://www.komplett.dk/img/p/1200/1153777.jpg",
                            ProductId = 15
                        },
                        new
                        {
                            ProductImageId = 19,
                            Image = "https://www.komplett.dk/img/p/1200/1151019.jpg",
                            ProductId = 16
                        },
                        new
                        {
                            ProductImageId = 20,
                            Image = "https://www.komplett.dk/img/p/1200/1149587.jpg",
                            ProductId = 17
                        },
                        new
                        {
                            ProductImageId = 21,
                            Image = "https://www.komplett.dk/img/p/1200/1138869.jpg",
                            ProductId = 18
                        },
                        new
                        {
                            ProductImageId = 22,
                            Image = "https://www.komplett.dk/img/p/1200/1157749.jpg",
                            ProductId = 19
                        },
                        new
                        {
                            ProductImageId = 23,
                            Image = "https://www.komplett.dk/img/p/1080/1124639.jpg",
                            ProductId = 20
                        },
                        new
                        {
                            ProductImageId = 24,
                            Image = "https://www.komplett.dk/img/p/1080/1124646.jpg",
                            ProductId = 21
                        },
                        new
                        {
                            ProductImageId = 25,
                            Image = "https://www.komplett.dk/img/p/1200/1130516.jpg",
                            ProductId = 22
                        },
                        new
                        {
                            ProductImageId = 26,
                            Image = "https://www.elgiganten.dk/image/dv_web_D180001002410624/153758/lg-48-cx-4k-oled-tv-oled48cx.jpg?$fullsize$",
                            ProductId = 23
                        },
                        new
                        {
                            ProductImageId = 27,
                            Image = "https://www.elgiganten.dk/image/dv_web_D18000100296972/12851/razer-blackwidow-elite-gaming-tastatur.jpg?$fullsize$",
                            ProductId = 24
                        },
                        new
                        {
                            ProductImageId = 28,
                            Image = "https://www.komplett.dk/img/p/1200/1144808.jpg",
                            ProductId = 25
                        },
                        new
                        {
                            ProductImageId = 29,
                            Image = "https://www.komplett.dk/img/p/1200/1127733.jpg",
                            ProductId = 26
                        },
                        new
                        {
                            ProductImageId = 30,
                            Image = "https://www.komplett.dk/img/p/1200/1146944.jpg",
                            ProductId = 27
                        },
                        new
                        {
                            ProductImageId = 31,
                            Image = "https://www.komplett.dk/img/p/1200/1150475.jpg",
                            ProductId = 28
                        },
                        new
                        {
                            ProductImageId = 32,
                            Image = "https://www.komplett.dk/img/p/1200/1041072.jpg",
                            ProductId = 29
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DataLayer.Entities.Order", b =>
                {
                    b.HasOne("DataLayer.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("DataLayer.Entities.OrderProduct", b =>
                {
                    b.HasOne("DataLayer.Entities.Order", "Order")
                        .WithMany("Products")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Entities.Product", "Product")
                        .WithMany("Orders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.Entities.Product", b =>
                {
                    b.HasOne("DataLayer.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");

                    b.HasOne("DataLayer.Entities.Manufacturer", "Manufacturer")
                        .WithMany("Products")
                        .HasForeignKey("ManufacturerId");
                });

            modelBuilder.Entity("DataLayer.Entities.ProductImage", b =>
                {
                    b.HasOne("DataLayer.Entities.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DataLayer.Entities.Customer", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DataLayer.Entities.Customer", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Entities.Customer", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DataLayer.Entities.Customer", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
